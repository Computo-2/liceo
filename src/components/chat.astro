---

---

<div class="fixed right-4 bottom-4 z-20">
  <!-- Ventana del chat -->
  <section
    id="chatWindow"
    class="pointer-events-none opacity-0 translate-y-5 scale-95 transition
           duration-200 ease-out
           fixed right-4 bottom-[88px] z-25 p-0 pb-2
           w-[450px] max-w-[calc(100vw-32px)] max-h-[50vh] h-[400px]
           bg-white text-slate-900 rounded-2xl shadow-xl overflow-hidden
           data-[open=true]:pointer-events-auto data-[open=true]:opacity-100 data-[open=true]:translate-y-0 data-[open=true]:scale-100"
    role="dialog"
    aria-labelledby="chatTitle"
    aria-modal="false"
    data-open="false"
  >
    <!-- Header -->
    <header class="flex items-center gap-3 px-4 py-3 bg-blue-200 border-b border-blue-100">
      <div aria-hidden="true" class="w-10 h-10 rounded-full bg-[#32509c] text-white grid place-items-center font-bold">
        LM
      </div>
      <div class="min-w-0">
        <h2 id="chatTitle" class="text-sm font-semibold truncate">Liceo Michoacano</h2>
        <p class="text-xs text-slate-500"><span class="text-green-500">En línea •</span> Chatbot de asistencia</p>
      </div>
      <button
        id="chatClose"
        type="button"
        class="ml-auto w-8 h-8 rounded-lg hover:bg-black/5 grid place-items-center"
        aria-label="Cerrar chat"
        title="Cerrar"
      >
        ✕
      </button>
    </header>

   <!-- Body (último hijo dentro de la ventana) -->
<div id="chatBody" class="bg-slate-50 h-[calc(100%-52px)] overflow-y-auto p-3 space-y-2">
  <!-- Mensaje inicial -->
  <div class="max-w-[78%] rounded-xl rounded-bl-sm border border-slate-200 bg-white px-3 py-2 text-[13px] leading-snug">
    ¡Hola! ¿Cómo puedo ayudarte hoy?
  </div>
  
</div>

<div
  id="chatBackdrop"
  role="presentation"
  class="fixed inset-0 z-[9997] bg-black/40 opacity-0 pointer-events-none transition-opacity duration-200
         data-[open=true]:opacity-100 data-[open=true]:pointer-events-auto">
</div>


  </section>

  <!-- Botón flotante -->
  <button
    id="chatToggle"
    type="button"
    class="grid place-items-center w-14 h-14 rounded-full bg-[#32509c] text-white shadow-xl
           hover:scale-105 active:scale-95 transition"
    aria-controls="chatWindow"
    aria-expanded="false"
    title="Abrir chat"
  >
    <!-- Ícono burbuja -->
    <svg width="26" height="26" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M20 12.5c0 3.59-3.58 6.5-8 6.5-.9 0-1.76-.12-2.56-.35L4 20l1.45-3.62C4.54 15.18 4 13.9 4 12.5 4 8.91 7.58 6 12 6s8 2.91 8 6.5Z"
            stroke="currentColor" stroke-width="1.6" fill="currentColor"/>
    </svg>
  </button>
</div>



<script is:inline>
  // ====== Referencias base ======
  const chatBody = document.getElementById("chatBody");
  const $ = (sel) => document.querySelector(sel);
  const win = $("#chatWindow");
  const toggleBtn = $("#chatToggle");
  const closeBtn = $("#chatClose");

  // (Opcional) Si mantienes input/form para texto libre:
  const form = $("#chatForm");
  const input = $("#chatText");
  const sendBtn = $("#chatSend");

  // ====== Menú jerárquico (puedes editar textos a tu gusto) ======
  const MENU = {
    root: [
      { id: "pagos",    label: "📄 Informes de pago", submenu: "pagos" },
      { id: "horarios", label: "⏰ Horarios de clases", submenu: "horarios" },
      { id: "soporte",  label: "💬 Contactar soporte", submenu: "soporte" },
    ],
    pagos: [
      { id: "calendario_pagos", label: "Calendario de pagos", action: { type: "message", text: "Calendario de pagos: consulta tu portal o administración." } },
      { id: "comprobante",      label: "Obtener comprobante", action: { type: "message", text: "Para comprobante: comparte tu folio y fecha de pago." } },
      { id: "formas_pago",      label: "Formas de pago",      action: { type: "message", text: "Aceptamos transferencia, depósito y pago en caja." } },
    ],
    horarios: [
      // Nota: antes abrían PDFs; ahora solo enviamos texto descriptivo (sin links).
      { id: "primaria_pdf",   label: "Primaria (PDF)",       action: { type: "link", url: "/docs/horarios-primaria.pdf" } },
      { id: "secundaria_pdf", label: "Secundaria (PDF)",     action: { type: "link", url: "/docs/horarios-secundaria.pdf" } },
      { id: "prepa_pdf",      label: "Preparatoria (PDF)",   action: { type: "link", url: "/docs/horarios-prepa.pdf" } },
    ],
    soporte: [
      // Nota: antes abrían WhatsApp/correo; ahora solo texto con indicaciones.
      { id: "whatsapp", label: "Abrir WhatsApp", action: { type: "whatsapp", phone: "52XXXXXXXXXX", text: "Hola, necesito ayuda." } },
      { id: "correo",   label: "Enviar correo",  action: { type: "mailto", to: "soporte@liceomichoacano.edu.mx", subject: "Soporte", body: "Necesito ayuda con..." } },
      { id: "tel",      label: "Llamar",         action: { type: "link", url: "tel:+52XXXXXXXXXX" } },
    ],
  };

  // ====== Estado / navegación ======
  let menuStack = ["root"];
  const QR_SELECTOR = '[data-qr="true"]';

  // ====== Utilidades de mensajes ======
  function appendMsg(text, type) {
    const el = document.createElement("div");
    el.className =
      type === "user"
        ? "max-w-[78%] ml-auto rounded-xl rounded-br-sm bg-blue-100 px-3 py-2 text-[13px] leading-snug"
        : "max-w-[78%] rounded-xl rounded-bl-sm border border-slate-200 bg-white px-3 py-2 text-[13px] leading-snug";
    el.textContent = text;
    chatBody?.appendChild(el);
  }

  function scrollToBottom() {
    chatBody.scrollTop = chatBody.scrollHeight;
  }

  function removeQuickReplies() {
    chatBody?.querySelectorAll(QR_SELECTOR).forEach((n) => n.remove());
  }

  function renderMenu(menuId) {
    if (!chatBody) return;
    removeQuickReplies();

    const opts = MENU[menuId] || [];
    const showBack = menuId !== "root";

    const wrap = document.createElement("div");
    wrap.setAttribute("data-qr", "true");
    wrap.className = "sticky bottom-0 bg-slate-50/90 backdrop-blur p-2 -mx-3 pt-3";

    const inner = document.createElement("div");
    inner.className = "flex flex-wrap gap-2";

    opts.forEach((item) => {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = "px-3 py-2 text-sm rounded-xl bg-blue-100 hover:bg-blue-200 text-emerald-900 transition";
      btn.dataset.id = item.id;
      btn.textContent = item.label;
      inner.appendChild(btn);
    });

    if (showBack) {
      const backBtn = document.createElement("button");
      backBtn.type = "button";
      backBtn.className = "px-3 py-2 text-sm rounded-xl bg-white border border-slate-300 hover:bg-slate-50 text-slate-800 transition";
      backBtn.dataset.id = "__back";
      backBtn.textContent = "◀️ Volver";
      inner.appendChild(backBtn);
    }

    wrap.appendChild(inner);
    chatBody.appendChild(wrap);
    scrollToBottom();
  }

  function currentMenu() {
    return menuStack[menuStack.length - 1];
  }

  function goTo(menuId) {
    menuStack.push(menuId);
    renderMenu(menuId);
  }

  function goBack() {
    if (menuStack.length > 1) menuStack.pop();
    renderMenu(currentMenu());
  }

  // ====== Acciones SOLO TEXTO (sin abrir nada) ======
  function performAction(item) {
    const action = item.action;
    if (!action) return;

    let text;

    switch (action.type) {
      case "message":
        text = action.text || "Información enviada.";
        break;

      case "link":
        // Antes abría un PDF o tel:. Ahora solo texto (sin URL).
        // Puedes personalizar el mensaje por cada item.label si quieres.
        text = `Documento "${item.label}" disponible. Si necesitas que te lo enviemos, indícalo aquí.`;
        break;

      case "whatsapp":
        // Solo texto informativo, sin abrir WhatsApp.
        text = `WhatsApp de soporte: +${action.phone}. Mensaje sugerido: "${action.text || "Hola, necesito ayuda."}"`;
        break;

      case "mailto":
        // Solo texto informativo, sin abrir el cliente de correo.
        text = `Correo de soporte: ${action.to}. Asunto sugerido: "${action.subject || "Soporte"}".`;
        break;

      default:
        text = "Acción no implementada.";
    }

    appendMsg(text, "bot");
  }

  // ====== Interacción de opciones ======
  chatBody?.addEventListener("click", (e) => {
    const btn = e.target.closest("[data-id]");
    if (!btn) return;

    const id = btn.dataset.id;
    if (id === "__back") {
      appendMsg("◀️ Volver", "user");
      removeQuickReplies();
      goBack();
      return;
    }

    const menuId = currentMenu();
    const item = (MENU[menuId] || []).find((i) => i.id === id);
    if (!item) return;

    appendMsg(item.label, "user");
    removeQuickReplies();
    scrollToBottom();

    if (item.submenu && MENU[item.submenu]) {
      setTimeout(() => {
        appendMsg("Elige una opción:", "bot");
        goTo(item.submenu);
      }, 200);
    } else if (item.action) {
      setTimeout(() => {
        performAction(item);       // ← solo texto
        renderMenu(menuId);        // reimprimir el menú actual
      }, 250);
    } else {
      renderMenu(menuId);
    }
  });

  // ====== Abrir / cerrar chat ======
  const isOpen = () => win?.getAttribute("data-open") === "true";

  const openChat = () => {
    win?.setAttribute("data-open", "true");
    toggleBtn?.setAttribute("aria-expanded", "true");
    toggleBtn?.setAttribute("title", "Cerrar chat");
    menuStack = ["root"];
    renderMenu("root");
    if (input) setTimeout(() => input.focus(), 120);
  };

  const closeChat = () => {
    win?.setAttribute("data-open", "false");
    toggleBtn?.setAttribute("aria-expanded", "false");
    toggleBtn?.setAttribute("title", "Abrir chat");
    toggleBtn?.focus();
  };

  const toggleChat = () => (isOpen() ? closeChat() : openChat());

  toggleBtn?.addEventListener("click", toggleChat);
  closeBtn?.addEventListener("click", closeChat);

  // ====== Envío de texto libre (opcional) ======
  input?.addEventListener("input", () => {
    sendBtn.disabled = !input.value.trim();
  });

  form?.addEventListener("submit", (e) => {
    e.preventDefault();
    const text = input.value.trim();
    if (!text) return;

    removeQuickReplies();
    appendMsg(text, "user");
    input.value = "";
    sendBtn.disabled = true;
    scrollToBottom();

    setTimeout(() => {
      appendMsg("Gracias, hemos recibido tu mensaje.", "bot");
      renderMenu(currentMenu());
    }, 400);
  });

  // ====== Si el chat inicia abierto ======
  if (isOpen()) {
    menuStack = ["root"];
    renderMenu("root");
  }
</script>



