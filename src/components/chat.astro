---

---

<div class="fixed right-4 bottom-4 z-40">
  <!-- Ventana del chat -->
  <section
    id="chatWindow"
    class="pointer-events-none opacity-0 translate-y-5 scale-95 transition
           duration-200 ease-out
           fixed right-4 bottom-[88px] z-40 p-0 pb-2
           w-[450px] max-w-[calc(100vw-32px)] max-h-[50vh] h-[400px]
           bg-white text-slate-900 rounded-2xl shadow-xl overflow-hidden
           data-[open=true]:pointer-events-auto data-[open=true]:opacity-100 data-[open=true]:translate-y-0 data-[open=true]:scale-100"
    role="dialog"
    aria-labelledby="chatTitle"
    aria-modal="false"
    data-open="false"
  >
    <!-- Header -->
    <header
      class="flex items-center gap-3 px-4 py-3 bg-blue-200 border-b border-blue-100"
    >
      <div
        aria-hidden="true"
        class="w-10 h-10 rounded-full bg-[#32509c] text-white grid place-items-center font-bold"
      >
        LM
      </div>
      <div class="min-w-0">
        <h2 id="chatTitle" class="text-sm font-semibold truncate">
          Liceo Michoacano
        </h2>
        <p class="text-xs text-slate-500">
          <span class="text-green-500">En l√≠nea ‚Ä¢</span> Chatbot de asistencia
        </p>
      </div>
      <button
        id="chatClose"
        type="button"
        class="ml-auto w-8 h-8 rounded-lg hover:bg-black/5 grid place-items-center"
        aria-label="Cerrar chat"
        title="Cerrar"
      >
        ‚úï
      </button>
    </header>

    <div
      id="chatBody"
      class="bg-slate-50 h-[calc(100%-52px)] overflow-y-auto p-3 space-y-2"
    >
      <!-- Contenido del chatbot -->
    </div>
  </section>
  <div
    id="chatTail"
    aria-hidden="true"
    class="absolute right-[15px] bottom-[60px] w-8 h-8 rotate-45
            bg-white border border-slate-200 shadow-xl
            opacity-0 pointer-events-none"
  >
  </div>

  <!-- Bot√≥n flotante -->
  <button
    id="chatToggle"
    type="button"
    class="grid place-items-center w-14 h-14 rounded-full bg-[#32509c] text-white shadow-2xl
           hover:scale-105 active:scale-95 transition"
    aria-controls="chatWindow"
    aria-expanded="false"
    title="Abrir chat"
  >
    <!-- √çcono burbuja -->
    <svg
      width="26"
      height="26"
      viewBox="0 0 24 24"
      fill="none"
      aria-hidden="true"
    >
      <path
        d="M20 12.5c0 3.59-3.58 6.5-8 6.5-.9 0-1.76-.12-2.56-.35L4 20l1.45-3.62C4.54 15.18 4 13.9 4 12.5 4 8.91 7.58 6 12 6s8 2.91 8 6.5Z"
        stroke="currentColor"
        stroke-width="1.6"
        fill="currentColor"></path>
    </svg>
  </button>
</div>

<script is:inline>
  // ====== Referencias base ======
  const chatBody = document.getElementById("chatBody");
  const $ = (sel) => document.querySelector(sel);
  const win = $("#chatWindow");
  const toggleBtn = $("#chatToggle");
  const closeBtn = $("#chatClose");

  const input = $("#chatText");

  // ====== Opcion con enlace al calendario ======
  const CITA_AGENDAR_OPTION = {
    id: "AgendarCita",
    label: "üìÖ Agendar visita para conocer Liceo",
    action: { type: "scroll", target: "#calendario" },
    // WhatsApp:
    // action: { type: "whatsapp", phone: "52XXXXXXXXXX", text: "Quiero agendar experiencia liceo" }
    // texto:
    // action: { type: "message", text: "Agendaremos tu cita para la experiencia liceo." }
  };

  // ====== Men√∫ ======
  const MENU = {
    root: [
      {
        id: "Nuevo ingreso",
        label: "üìÑ Informes para nuevo ingreso",
        submenu: "NuevoIngreso",
      },
      { id: "Cursos", label: "‚è∞ Cursos", submenu: "Cursos" },
      { id: "Revalidacion", label: "üí¨ Revalidacion", submenu: "Revalidacion" },
    ],
    NuevoIngreso: [
      { label: "Consulta entre todo esto y mas que tenemos disponible" },

      {
        id: "Idiomas",
        label: "Idiomas",
        submenu: "IdiomasSub",
      },
      {
        id: "Viajes",
        label: "Viajes",
        submenu: "ViajesSub",
      },
      {
        id: "Bachillerato",
        label: "Bachillerato",
        submenu: "BachilleratoSub",
      },
      {
        id: "Talleres",
        label: "Talleres",
        submenu: "TalleresSub",
      },
      {
        id: "Optativas",
        label: "Optativas",
        submenu: "OptativasSub",
      },
    ],

    // ===== Submen√∫s individuales con ‚ÄúAgendar cita experiencia liceo‚Äù =====
    IdiomasSub: [
      {
        label: "Descriptor",
        action: { type: "message", text: "Descriptor idiomas" },
      },
      CITA_AGENDAR_OPTION,
    ],

    ViajesSub: [
      {
        label: "Descriptor viajes",
        action: { type: "message", text: "Descriptor viajes" },
      },
      CITA_AGENDAR_OPTION,
    ],

    BachilleratoSub: [
      {
        label: "Descriptor bachillerato",
        action: { type: "message", text: "Descriptor bachillerato" },
      },
      CITA_AGENDAR_OPTION,
    ],

    TalleresSub: [
      {
        label: "Descriptor talleres",
        action: { type: "message", text: "Descriptor talleres" },
      },
      CITA_AGENDAR_OPTION,
    ],

    OptativasSub: [
      {
        label: "Descriptor optativas",
        action: { type: "message", text: "Descriptor optativas" },
      },
      CITA_AGENDAR_OPTION,
    ],

    Revalidacion: [
      {
        label:
          "Si tienes materias cursadas anteriormente y se pueden hacer v√°lidas, da click en revalidaci√≥n de materias.",
      },
      {
        id: "Revalidacion",
        label: "Revalidaci√≥n de materias",
        action: {
          type: "correo",
          email: "computo4@liceomichoacano.edu.mx",
          text: "Hola, necesito informaci√≥n sobre la revalidaci√≥n de materias.",
          subject: "Solicitud de revalidaci√≥n de materias",
        },
      },
    ],
    Cursos: [
      { label: "Cursos de todo tipo para aumentar tus habilidades" },
      {
        id: "SobreCursos",
        label: "Conoce mas sobre nuestros cursos",
        action: { type: "link", url: "https://liq.com.mx/university-2/" },
      },
    ],
  };

  // ====== Estado / navegaci√≥n ======
  let menuStack = ["root"];
  const QR_SELECTOR = '[data-qr="true"]';

  // ====== Utilidades de mensajes ======
  function appendMsg(text, type) {
    const el = document.createElement("div");
    el.className =
      type === "user"
        ? "max-w-[78%] ml-auto rounded-xl rounded-br-sm bg-blue-100 px-3 py-2 text-[13px] leading-snug"
        : "max-w-[78%] rounded-xl rounded-bl-sm border border-slate-200 bg-white px-3 py-2 text-[13px] leading-snug";

    el.classList.add(
      "opacity-0",
      "translate-y-2",
      "scale-[.98]",
      type === "user" ? "translate-x-2" : "-translate-x-2",
      "transition",
      "duration-200",
      "ease-out"
    );

    el.textContent = text;
    chatBody?.appendChild(el);
    scrollToBottom();

    // Dispara la transici√≥n a estado final
    requestAnimationFrame(() => {
      el.classList.remove(
        "opacity-0",
        "translate-y-2",
        "scale-[.98]",
        "translate-x-2",
        "-translate-x-2"
      );
    });
  }

  function scrollToBottom() {
    chatBody.scrollTop = chatBody.scrollHeight;
  }

  function removeQuickReplies() {
    chatBody?.querySelectorAll(QR_SELECTOR).forEach((n) => n.remove());
  }

  function renderMenu(menuId) {
    if (!chatBody) return;
    removeQuickReplies();

    const opts = MENU[menuId] || [];
    const showBack = menuId !== "root";

    const wrap = document.createElement("div");
    wrap.setAttribute("data-qr", "true");
    wrap.className =
      "sticky bottom-0 bg-slate-50/90 backdrop-blur p-2 -mx-3 pt-3";

    const inner = document.createElement("div");
    inner.className = "flex flex-wrap gap-2";

    opts.forEach((item) => {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.dataset.id = item.id;
      if (!item.id) {
        btn.disabled = true;
        btn.className =
          "px-3 py-2 text-sm rounded-xl bg-blue-100 hover:bg-blue-200 text-emerald-900 transition";
      } else {
        btn.className =
          "px-3 py-2 text-sm rounded-xl bg-white border border-blue-300 hover:bg-blue-200 text-slate-800 transition";
      }
      btn.textContent = item.label;
      inner.appendChild(btn);
    });

    if (showBack) {
      const backBtn = document.createElement("button");
      backBtn.type = "button";
      backBtn.className =
        "px-3 py-2 text-sm rounded-xl bg-white border border-slate-300 hover:bg-blue-200 text-slate-800 transition";
      backBtn.dataset.id = "__back";
      backBtn.textContent = "‚óÄÔ∏è Volver";
      inner.appendChild(backBtn);
    }

    wrap.appendChild(inner);
    chatBody.appendChild(wrap);
    scrollToBottom();
  }

  function currentMenu() {
    return menuStack[menuStack.length - 1];
  }

  function goTo(menuId) {
    menuStack.push(menuId);
    renderMenu(menuId);
  }

  function goBack() {
    if (menuStack.length > 1) menuStack.pop();
    renderMenu(currentMenu());
  }

  // ====== Acciones SOLO TEXTO ======
  function performAction(item) {
    const action = item.action;
    if (!action) return;

    let text;

    // ===== Helpers de scroll con offset din√°mico =====
    const HEADER_SELECTORS = [
      "#siteHeader",
      ".site-header",
      ".navbar",
      "header.sticky",
      "header.fixed",
      "header.navbar",
      "#appBar",
    ];

    function getTopFixedHeight() {
      let h = 0;
      for (const sel of HEADER_SELECTORS) {
        const n = document.querySelector(sel);
        if (!n) continue;
        const cs = getComputedStyle(n);
        if (cs.position === "fixed" || cs.position === "sticky") {
          h += n.getBoundingClientRect().height;
        }
      }
      return h; // suma alturas de elementos superiores fijos/pegajosos
    }

    function getViewportExtraGap(goingDown) {
      // Extra ‚Äúaire‚Äù visual seg√∫n breakpoints y direcci√≥n
      const w = window.innerWidth;
      if (w <= 640) return goingDown ? 32 : 12; // m√≥vil
      if (w <= 1024) return goingDown ? 48 : 24; // tablet
      return goingDown ? 56 : 36; // desktop
    }

    function scrollToElementWithOffset(el) {
      const currentY = window.scrollY || window.pageYOffset;
      const elementY = el.getBoundingClientRect().top + currentY;
      const goingDown = elementY > currentY;

      const headerH = getTopFixedHeight();
      const extra = getViewportExtraGap(goingDown);

      // Offset negativo: queremos que el elemento quede visible debajo del header + aire extra
      const offset = -(headerH + extra);

      const targetY = elementY + offset;
      window.scrollTo({ top: targetY, behavior: "smooth" });

      // Ajuste fino tras el scroll (por si cambi√≥ el layout o hay fuentes/iframes que reflowean)
      setTimeout(() => {
        const headerNow = getTopFixedHeight();
        const desiredTop = headerNow + 8; // 8px de respiro
        const rect = el.getBoundingClientRect();
        const delta = rect.top - desiredTop;
        if (Math.abs(delta) > 2) {
          window.scrollBy({ top: delta, behavior: "auto" });
        }
      }, 450);
    }

    switch (action.type) {
      case "message":
        text = action.text || "Informaci√≥n enviada.";
        break;

      case "link":
        if (action.url) {
          text = `Estamos redirigiendote a la pagina nuestra pagina de cursos...`;
          setTimeout(() => {
            window.open(action.url, "_blank");
          }, 2200);
        } else {
          text = "El documento no tiene un enlace v√°lido.";
        }
        break;

      case "correo":
        if (action.email) {
          const subject = encodeURIComponent(action.subject || "Consulta");
          const body = encodeURIComponent(action.text || "");
          const mailto = `mailto:${action.email}?subject=${subject}&body=${body}`;

          window.location.href = mailto;

          text = `Abriendo correo a ${action.email}...`;
        } else {
          text = "No se encontr√≥ una direcci√≥n de correo v√°lida.";
        }
        break;

      case "scroll":
        const el = document.querySelector(action.target);
        if (el) {
          scrollToElementWithOffset(el);
          text = "Abriendo el calendario para agendar tu cita...";
          setTimeout(() => {
            if (typeof closeChat === "function") closeChat();
          }, 1700); 
        } else {
          text = "No se encontr√≥ el calendario en esta p√°gina.";
        }
        break;

      default:
        text = "Acci√≥n no implementada.";
    }

    appendMsg(text, "bot");
  }

  // ====== Interacci√≥n de opciones ======
  chatBody?.addEventListener("click", (e) => {
    const btn = e.target.closest("[data-id]");
    if (!btn) return;

    const id = btn.dataset.id;
    if (id === "__back") {
      appendMsg("‚óÄÔ∏è Volver", "user");
      removeQuickReplies();
      goBack();
      return;
    }

    const menuId = currentMenu();
    const item = (MENU[menuId] || []).find((i) => i.id === id);
    if (!item) return;

    appendMsg(item.label, "user");
    removeQuickReplies();
    scrollToBottom();

    showTyping();

    if (item.submenu && MENU[item.submenu]) {
      setTimeout(() => {
        hideTyping();
        appendMsg("Elige una opci√≥n:", "bot");
        goTo(item.submenu);
        scrollToBottom();
      }, 400);
    } else if (item.action) {
      setTimeout(() => {
        hideTyping();
        performAction(item);
        renderMenu(menuId);
        scrollToBottom();
      }, 450);
    } else {
      hideTyping();
      renderMenu(menuId);
    }
  });

  // ====== Abrir / cerrar chat ======
  const chatTail = document.getElementById("chatTail");
  const isOpen = () => win?.getAttribute("data-open") === "true";

  const openChat = () => {
    win?.setAttribute("data-open", "true");
    toggleBtn?.setAttribute("aria-expanded", "true");
    toggleBtn?.setAttribute("title", "Cerrar chat");

    if (chatTail) {
      chatTail.classList.remove("opacity-0", "pointer-events-none");
    }
    resetChat();

    if (input) setTimeout(() => input.focus(), 120);
  };

  const closeChat = () => {
    win?.setAttribute("data-open", "false");
    toggleBtn?.setAttribute("aria-expanded", "false");
    toggleBtn?.setAttribute("title", "Abrir chat");
    toggleBtn?.focus();

    if (chatTail) {
      chatTail.classList.add("opacity-0", "pointer-events-none");
    }
  };

  const toggleChat = () => (isOpen() ? closeChat() : openChat());

  toggleBtn?.addEventListener("click", toggleChat);
  closeBtn?.addEventListener("click", closeChat);

  // ====== Si el chat inicia abierto ======
  if (isOpen()) {
    menuStack = ["root"];
    renderMenu("root");
  }

  (() => {
    const chatWindow = document.getElementById("chatWindow");
    if (!chatWindow) return;

    let overlay = document.getElementById("__chat_overlay__");
    if (!overlay) {
      overlay = document.createElement("div");
      overlay.id = "__chat_overlay__";
      Object.assign(overlay.style, {
        position: "fixed",
        inset: "0",
        background: "rgba(0,0,0,0.80)",
        opacity: "0",
        pointerEvents: "none",
        transition: "opacity 200ms ease",
        zIndex: "30",
      });
      document.body.appendChild(overlay);
    }

    const inerted = new Set();
    const html = document.documentElement;
    const body = document.body;

    // Bloquear scroll del FONDO, permitir dentro del chat
    function shouldBlock(e) {
      // Si el evento viene desde dentro del chat, no bloquear
      return !e.target.closest("#chatWindow");
    }

    function onWheel(e) {
      if (shouldBlock(e)) e.preventDefault();
    }

    function onTouchMove(e) {
      if (shouldBlock(e)) e.preventDefault();
    }

    function enableBlockers() {
      // Bloquea el scroll del documento
      document.documentElement.style.overflow = "hidden";
      document.body.style.overflow = "hidden";

      // Pero permite scroll si el gesto nace dentro del chat
      window.addEventListener("wheel", onWheel, { passive: false });
      window.addEventListener("touchmove", onTouchMove, { passive: false });
    }

    function disableBlockers() {
      document.documentElement.style.overflow = "";
      document.body.style.overflow = "";

      window.removeEventListener("wheel", onWheel);
      window.removeEventListener("touchmove", onTouchMove);
      inerted.forEach((el) => el.removeAttribute("inert"));
      inerted.clear();
    }

    function showOverlay() {
      overlay.style.opacity = "1";
      overlay.style.pointerEvents = "auto";

      chatWindow.style.pointerEvents = "auto";

      overlay.onclick = () => {
        try {
          typeof closeChat === "function"
            ? closeChat()
            : chatWindow.setAttribute("data-open", "false");
        } catch {
          chatWindow.setAttribute("data-open", "false");
        }
      };
    }

    function hideOverlay() {
      overlay.style.opacity = "0";
      overlay.style.pointerEvents = "none";
      overlay.onclick = null;
      chatWindow.style.pointerEvents = "";
    }

    const obs = new MutationObserver((muts) => {
      for (const m of muts) {
        if (m.attributeName !== "data-open") continue;
        const open = chatWindow.getAttribute("data-open") === "true";
        if (open) {
          showOverlay();
          enableBlockers();
        } else {
          hideOverlay();
          disableBlockers();
        }
      }
    });
    obs.observe(chatWindow, { attributes: true });

    if (chatWindow.getAttribute("data-open") === "true") {
      showOverlay();
      enableBlockers();
    }
  })();

  let hasWelcomed = false;

  function resetChat() {
    if (!chatBody) return;

    if (!hasWelcomed) {
      const welcome = document.createElement("div");
      welcome.className =
        "max-w-[78%] rounded-xl rounded-bl-sm border border-slate-200 bg-white px-3 py-2 text-[13px] leading-snug";
      welcome.textContent = "¬°Hola! ¬øC√≥mo puedo ayudarte hoy?";
      chatBody.appendChild(welcome);
      hasWelcomed = true;
    }

    menuStack = ["root"];
    renderMenu("root");

    scrollToBottom();
  }

  let typingEl = null;

  function showTyping() {
    if (!chatBody || typingEl) return;

    const wrap = document.createElement("div");
    wrap.className =
      "max-w-[78%] rounded-xl rounded-bl-sm border border-slate-200 bg-white px-3 py-2 text-[13px] leading-snug";

    const inner = document.createElement("div");
    inner.className = "flex items-center gap-1";
    inner.innerHTML = `
    <span class="w-2 h-2 rounded-full bg-slate-500 animate-bounce"></span>
    <span class="w-2 h-2 rounded-full bg-slate-500 animate-bounce"></span>
    <span class="w-2 h-2 rounded-full bg-slate-500 animate-bounce"></span>
  `;

    wrap.appendChild(inner);

    // Animaci√≥n de entrada del ‚Äútyping‚Äù
    wrap.classList.add(
      "opacity-0",
      "translate-y-2",
      "transition",
      "duration-150",
      "ease-out"
    );
    typingEl = wrap;
    chatBody.appendChild(typingEl);
    scrollToBottom();
    requestAnimationFrame(() => {
      wrap.classList.remove("opacity-0", "translate-y-2");
    });
  }

  function hideTyping() {
    if (!typingEl) return;
    typingEl.classList.add(
      "opacity-0",
      "translate-y-1",
      "transition",
      "duration-100",
      "ease-in"
    );
    setTimeout(() => {
      typingEl?.remove();
      typingEl = null;
    }, 110);
  }
</script>

<style>
  #chatBody {
    overflow-y: auto;
    max-height: 70vh;
    overscroll-behavior: contain;
    -webkit-overflow-scrolling: touch;
  }
</style>
